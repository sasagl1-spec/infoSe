# Telegram –∫–∞–Ω–∞–ª –º–æ–¥—É–ª–µ–π: https://t.me/modulesTheHika
# –°–æ–∑–¥–∞—Ç–µ–ª—å: @vipqlkxn

from hikka import loader, utils
from telethon.tl.functions.messages import SendMessageRequest
from telethon.tl.functions.contacts import ResolveUsernameRequest
import asyncio

@loader.tds
class GsazilInfoMod(loader.Module):
    """üîç –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ @Gsazilbot"""
    strings = {"name": "GsazilInfoPro"}

    async def client_ready(self, client, db):
        self._client = client
        self._db = db

    @loader.command(alias="ginf")
    async def gsazilinfocmd(self, message):
        """üìä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ @Gsazilbot - .ginf"""
        args = utils.get_args_raw(message)
        
        if not args:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\nüí° –ü—Ä–∏–º–µ—Ä: `.ginf @username` –∏–ª–∏ `.ginf 123456789`")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º entity –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—á–∞—Ç–∞
            if args.startswith("@"):
                entity = await self._client(ResolveUsernameRequest(args[1:]))
                target_id = entity.peer.user_id
            else:
                target = await self._client.get_entity(int(args))
                target_id = target.id

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É @Gsazilbot
            bot_entity = await self._client(ResolveUsernameRequest("Gsazilbot"))
            bot_input = await self._client.get_input_entity(bot_entity.peer)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û ID –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã /info
            await self._client(SendMessageRequest(
                peer=bot_input,
                message=f"{target_id}",
                no_webpage=True
            ))

            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
            await asyncio.sleep(3)
            async for msg in self._client.iter_messages(bot_input, limit=1):
                if msg.out:
                    continue
                
                # üîÑ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞
                formatted_text = self.format_bot_response(msg.text)
                await utils.answer(message, formatted_text)
                return

            await utils.answer(message, "‚è≥ –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥")

        except ValueError:
            await utils.answer(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username")
        except Exception as e:
            await utils.answer(message, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}")

    @loader.command(alias="ginfr")
    async def gsazilreplycmd(self, message):
        """üì® –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ - .ginfr"""
        reply = await message.get_reply_message()
        
        if not reply:
            await utils.answer(message, "‚Ü©Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        try:
            target = await reply.get_sender()
            bot_entity = await self._client(ResolveUsernameRequest("Gsazilbot"))
            bot_input = await self._client.get_input_entity(bot_entity.peer)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û ID –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã /info
            await self._client(SendMessageRequest(
                peer=bot_input,
                message=f"{target.id}",
                no_webpage=True
            ))

            await asyncio.sleep(3)
            async for msg in self._client.iter_messages(bot_input, limit=1):
                if msg.out:
                    continue
                
                # üîÑ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                formatted_text = self.format_bot_response(msg.text)
                await utils.answer(message, formatted_text)
                return

            await utils.answer(message, "‚è≥ –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥")

        except Exception as e:
            await utils.answer(message, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}")

    def format_bot_response(self, text):
        """üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞"""
        if not text:
            return "üì≠ –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞"
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞
        replacements = {
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ": "üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**",
            "ID": "üÜî **ID**",
            "–ò–º—è": "üë§ **–ò–º—è**",
            "Username": "üìõ **–Æ–∑–µ—Ä–Ω–µ–π–º**",
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞": "üìû **–¢–µ–ª–µ—Ñ–æ–Ω**",
            "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": "üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**",
            "–°—Ç–∞—Ç—É—Å": "üí¨ **–°—Ç–∞—Ç—É—Å**",
            "–ë–æ—Ç": "ü§ñ **–ë–æ—Ç**",
            "–î–∞": "‚úÖ **–î–∞**",
            "–ù–µ—Ç": "‚ùå **–ù–µ—Ç**",
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö": "üìí **–í –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö**",
            "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω": "üîê **–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω**",
            "–ü—Ä–µ–º–∏—É–º": "‚≠ê **–ü—Ä–µ–º–∏—É–º**",
            "–û–≥—Ä–∞–Ω–∏—á–µ–Ω": "üö´ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω**",
            "–°–∫–∞–º": "‚ö° **–°–∫–∞–º**",
            "–°–ø–∞–º": "üîû **–°–ø–∞–º**",
            "–§–µ–π–∫": "üé≠ **–§–µ–π–∫**"
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
        for old, new in replacements.items():
            text = text.replace(old, new)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        lines = text.split('\n')
        formatted_lines = []
        for line in lines:
            if line.strip() and ':' in line:
                formatted_lines.append(f"‚Ä¢ {line}")
            else:
                formatted_lines.append(line)
        
        return "üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:**\n\n" + "\n".join(formatted_lines)

    @loader.command(alias="ginfhelp")
    async def gsazilhelpcmd(self, message):
        """üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –º–æ–¥—É–ª—è - .ginfhelp"""
        help_text = """
ü§ñ **–ú–æ–¥—É–ª—å GsazilInfoPro**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `.ginf @username` - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
‚Ä¢ `.ginf 123456789` - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ ID
‚Ä¢ `.ginfr` - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ `.ginfhelp` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
` .ginf @username `
` .ginf 123456789 `
` –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .ginfr `

‚ö° **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ú–æ–¥—É–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç–∞ @Gsazilbot –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
        await utils.answer(message, help_text)
