# Telegram –∫–∞–Ω–∞–ª –º–æ–¥—É–ª–µ–π: https://t.me/modulesTheHika
# –°–æ–∑–¥–∞—Ç–µ–ª—å: @vipqlkxn

from hikka import loader, utils
from telethon.tl.functions.messages import SendMessageRequest
from telethon.tl.functions.contacts import ResolveUsernameRequest
import asyncio

@loader.tds
class GsazilInfoMod(loader.Module):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ @Gsazilbot"""
    strings = {"name": "GsazilInfo"}

    async def client_ready(self, client, db):
        self._client = client
        self._db = db

    @loader.command(alias="gsinfo")
    async def gsazilinfocmd(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ @Gsazilbot - .gsinfo"""
        args = utils.get_args_raw(message)
        
        if not args:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–ü—Ä–∏–º–µ—Ä: `.gsinfo @username` –∏–ª–∏ `.gsinfo 123456789`")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º entity –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—á–∞—Ç–∞
            if args.startswith("@"):
                entity = await self._client(ResolveUsernameRequest(args[1:]))
                target = entity.peer
            else:
                target = await self._client.get_entity(int(args))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É @Gsazilbot
            bot_entity = await self._client(ResolveUsernameRequest("Gsazilbot"))
            bot_input = await self._client.get_input_entity(bot_entity.peer)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É
            await self._client(SendMessageRequest(
                peer=bot_input,
                message=f"/info {target.user_id if hasattr(target, 'user_id') else target.channel_id}",
                no_webpage=True
            ))

            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
            await asyncio.sleep(2)
            async for msg in self._client.iter_messages(bot_input, limit=1):
                if msg.out:
                    continue
                result_text = msg.text
                await utils.answer(message, f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç @Gsazilbot:\n\n{result_text}")
                return

            await utils.answer(message, "‚ùå –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")

        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    @loader.command(alias="gsreply")
    async def gsazilreplycmd(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–ª–∞–π–Ω—É—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ - .gsreply"""
        reply = await message.get_reply_message()
        
        if not reply:
            await utils.answer(message, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        try:
            target = await reply.get_sender()
            bot_entity = await self._client(ResolveUsernameRequest("Gsazilbot"))
            bot_input = await self._client.get_input_entity(bot_entity.peer)

            await self._client(SendMessageRequest(
                peer=bot_input,
                message=f"/info {target.id}",
                no_webpage=True
            ))

            await asyncio.sleep(2)
            async for msg in self._client.iter_messages(bot_input, limit=1):
                if msg.out:
                    continue
                result_text = msg.text
                await utils.answer(message, f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç @Gsazilbot:\n\n{result_text}")
                return

            await utils.answer(message, "‚ùå –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")

        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
